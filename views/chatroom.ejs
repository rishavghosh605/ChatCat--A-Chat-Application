<!DOCTYPE html>
<html lang="en">
<head>
	<meta charset="UTF-8">
	<title>ChatCat - <%=room%></title>
	<link rel="stylesheet" href="/css/chatroomStyles.css">
	<script src="https://widget.cloudinary.com/global/all.js"></script>
	<script src="/js/jquery-2.1.4.min.js"></script>
	<script src='/socket.io/socket.io.js'></script>
	<script>
		'use strict';
		$(()=>{
			let socket=io('<%=host%>'+'/chatter',{
				transports:['websocket']
			});
			let roomID="<%=roomID%>";
			let user="<%=user.fullName%>";
			let userPic="<%=user.profilePic%>";
			let chatUsers=$('.chatUsers');
			let chatInput=$("input[name='userInput']");
			let chatMessagesDiv=$('.chatMessages');
			let filePicker=$("#uploadFile");
			//Listening to the connect event
			socket.on('connect',()=>{ 
				socket.emit('join',{
					roomID,
					user,
					userPic
				});
			});

			let userList=user=>{
				return `<div class="userBlock">
					<div class="userPic"><img src=${user.userPic} alt=${user.user}></div>
					<div class="cuserName">${user.user}</div>
				</div>`;
			}

			let updateFeed=(userPic,message)=>{
				let template=`				<div class="chatBlock">
					<div class="userPic"><img src=${userPic}></div>
					<div class="chatMsg">${message}</div>
				</div>		`;
				$(template).hide().prependTo(chatMessagesDiv).slideDown(200);
			}
			socket.on('updateUsersList',data=>{
				let parseData=JSON.parse(data);
				let usersListData='';
				for(let user of parseData){
					usersListData+=userList(user);
				}

				//Using jQUERY we are going to empty out the div that we have just now stored in chatUsers variable then chain the entire html for the all of the active users for that particular chatroom
				chatUsers.html('').html(usersListData);
			});

			//we listen to the keyup event that is whenever a user depresses a key on the key board
			//Note:-notice that the arrow function is not used as a callback, as we need access to the this keyword
			// the purpose of the this keyword is to offer a way to access the context within which the event was fired
			//using the '=>' keyword does not create a new this context unlike regular functions 
			//we are asccessing the event object that the event listener provides using the evt variable
			 //And to access the this keyword we use the function keword  
			chatInput.on('keyup',function(evt){
				evt.preventDefault();//Used to prevent the execution of the default set of actions that the browser executes when the user presses the enter key

				let messageFld=$(this);
				if(evt.which === 13 && messageFld.val()!== '')
				{
					socket.emit('newMessage',{
						roomID,
						user,
						userPic,
						message:messageFld.val()
					});

					//Update the local feed
					updateFeed(userPic,messageFld.val());
					messageFld.val('');
				} 
			});
			socket.on('inMessage',data=>{
				let parsedData=JSON.parse(data);
				updateFeed(parsedData.userPic,parsedData.message);
			});

			//To upload photo
			filePicker.on('click',function(evt){
				cloudinary.openUploadWidget({
					cloud_name:"dj3osqyic",
					upload_preset:"izyrigr6"
			},(error,result)=>{
				if(!error){
					let tmp="";
					for(let img of result){
						tmp+=`<img src="${img.url}">`
					}
					updateFeed(userPic,tmp);
					socket.emit('newMessage',{
						roomID,
						user,
						userPic,
						message:tmp	
					});

				}

			});

			});
				
		});
	</script>
</head>
<body>
	<div class="container">
		<div class="titlePanel">
			<h1>ChatCAT | <%=room%></h1>
		</div>
		<div class="controls">
			<div class="userPicHolder"><img src="<%=user.profilePic%>" alt="John Doe"></div>
			<p class="userName"><%=user.fullName%></p>
			<a href="/rooms" id="roomsBtn">Rooms</a>
			<a href="/logout" id="logOutBtn">Logout</a>
		</div>
		<div class="chatListDiv">
			<div class="chatMessagesPanel">
				<div class="chatMessages">
				<!-- Loop this for chat messages -->
			
				<!-- loop end -->
				</div>
				<div class="typePanel">
					<input type="text" name="userInput" placeholder="Type here and press enter">
					<a href="#" id="uploadFile" class="fileUploadBtn">Photo</a>
				</div>
			</div>
			<div class="chatUsers">
			<!-- Loop this for chat users -->
				<div class="userBlock">
					<div class="userPic"><img src="/img/user.jpg" alt="John Doe"></div>
					<div class="cuserName">John Doe</div>
				</div>
			<!-- loop end -->
			</div>
		</div>
	</div>
</body>
</html>